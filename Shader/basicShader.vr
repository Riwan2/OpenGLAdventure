#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoord;

layout (std140) uniform Matrices
{
    uniform mat4 projection;
    uniform mat4 view;
    uniform vec3 lightPos;
    uniform vec3 lightColor;
};

uniform mat4 model;

out VS_OUT {
    vec2 TexCoord;
    vec3 cameraDirection;
    vec3 lightVector;
    vec3 normal;
} vs_out;

vec4 worldPosition;

void main()
{
    worldPosition = model * vec4(aPos, 1.0);
    gl_Position = projection * view * worldPosition;
    
    vs_out.normal = mat3(transpose(inverse(model))) * aNormal;
    vs_out.cameraDirection = vec3(inverse(view) * vec4(0, 0, 0, 1)) - vec3(worldPosition);
    vs_out.lightVector = lightPos - vec3(worldPosition);
    vs_out.TexCoord = aTexCoord;
}
