#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

out vec3 Normal;
out vec3 FragPos;
out vec3 outColor;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform vec3 myColor;
uniform vec3 lightColor;
uniform vec3 lightPos;
uniform float lightPower;
uniform float time;

float speed = 5;
float waveLenght = 5;

void main()
{
    vec3 basePosition = aPos;
    float radianX = (basePosition.x / waveLenght + time / speed) * 6;
    float radianZ = (basePosition.z / waveLenght + time / speed) * 6;
    float final = 0.25 * (sin(radianZ) + cos(radianX));

    basePosition.x = basePosition.x + final;
    basePosition.y = basePosition.y + final;
    
    vec4 position = projection * view * model * vec4(basePosition, 1.0);    
    gl_Position = position;
    FragPos = vec3(model * vec4(aPos, 1.0));
    Normal = mat3(transpose(inverse(model))) * aNormal;

    float ambientStrenght = 0.1f;
    vec3 ambient = ambientStrenght * lightColor;

    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos) * lightPower;
    float nDot1 = dot(norm, lightDir);
    float brightness = max(nDot1, 0.1);
    vec3 diffuse = brightness * lightColor;

    outColor = (diffuse + ambient) * myColor;
}
