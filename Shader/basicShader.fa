#version 330 core

out vec4 color;
in vec2 TexCoord;

uniform sampler2D myTexture;
uniform vec3 lightColor;

in vec3 cameraDirection;
in vec3 normal;
in vec3 lightVector;

float shineDamper = 64;
float reflectivity = 1.0;
float ambientStrenght = 0.2f;
vec3 finalSpecular;
vec3 diffuse;
vec4 textureVector;

void lighting()
{
    //basic
    vec3 norm = normalize(normal);
    vec3 toLight = normalize(lightVector);
    float dotLight = dot(norm, toLight);
    float brightness = max(dotLight, ambientStrenght);
    diffuse = brightness * lightColor;

    //specular
    vec3 cameraNorm = normalize(cameraDirection);
    vec3 lightDirection = -toLight;
    vec3 lightReflection = reflect(lightDirection, norm);
    float dotReflection = dot(cameraNorm, lightReflection);
    float reflection = max(dotReflection, 0.0);
    float dampedFactor = pow(reflection, shineDamper);
    finalSpecular = dampedFactor * lightColor * reflectivity;
}

void main()
{
    //color = vec4(1.0, 1.0, 1.0, 1.0);
    lighting();
    color =  texture(myTexture, TexCoord) * vec4(diffuse, 1.0) + vec4(finalSpecular, 1.0);
}
