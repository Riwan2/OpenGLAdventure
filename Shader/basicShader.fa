#version 330 core

out vec4 color;

uniform sampler2D myTexture;
uniform float shineDamper;
uniform float reflectivity;

layout (std140) uniform Matrices
{
    uniform mat4 projection;
    uniform mat4 view;
    uniform vec3 lightPos;
    uniform vec3 lightColor;
};

in VS_OUT {
    vec2 TexCoord;
    vec3 cameraDirection;
    vec3 lightVector;
    vec3 normal;
    float visibility;
} fs_in;

uniform vec3 skyColor;

vec3 finalSpecular;
vec3 diffuse;
vec4 textureVector;
const float ambientStrenght = 0.2f;

void lighting()
{
    //basic
    vec3 norm = normalize(fs_in.normal);
    vec3 toLight = normalize(fs_in.lightVector);
    float dotLight = dot(norm, toLight);
    float brightness = max(dotLight, ambientStrenght);
    diffuse = brightness * lightColor;

    //specular
    vec3 cameraNorm = normalize(fs_in.cameraDirection);
    vec3 lightDirection = -toLight;
    vec3 lightReflection = reflect(lightDirection, norm);
    float dotReflection = dot(cameraNorm, lightReflection);
    float reflection = max(dotReflection, 0.0);
    float dampedFactor = pow(reflection, shineDamper);
    finalSpecular = dampedFactor * lightColor * reflectivity;
}

void main()
{
    lighting();    
    vec4 textureColor = texture(myTexture, fs_in.TexCoord);
    if (textureColor.a < 0.5) discard;
    color = textureColor * vec4(diffuse, 1.0) + vec4(finalSpecular, 1.0);
    color = mix(vec4(skyColor, 1.0), color, fs_in.visibility);
}
