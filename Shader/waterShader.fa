#version 330 core

out vec4 outColor;

uniform sampler2D myTexture;
uniform float time;

in vec3 basePosition;
in vec2 TexCoord;

vec3 color;
const int numberOfLevel = 20;
const vec3 waterColor = vec3(0.2, 0.5, 1.0);

void baseLighting()
{
    vec3 diffuse = vec3(1.0) + basePosition.y * 0.25;
    color = diffuse * waterColor;
}

void main()
{
    baseLighting();
    float size = 0.03;
    float xSpeed = 0.5;
    float ySpeed = 0;
    
    xSpeed *= (size / (100 * size));
    ySpeed *= (size / (100 * size));

    vec4 textureColor = texture(myTexture, TexCoord / size);
    vec4 textureColor2 = texture(myTexture, vec2(TexCoord.x + time * xSpeed, TexCoord.y + time * ySpeed) / size);

    textureColor = 1 - textureColor;
    textureColor2 = 1 - textureColor2;

    vec4 texColor = mix(textureColor, textureColor2, 0.5);
    texColor.a = 0.5;
    outColor = vec4(color, 1.0);
    outColor *= texColor;

    outColor = floor(outColor * numberOfLevel) / numberOfLevel;
    float contrast = 10;
    outColor.rgb = (outColor.rgb - 0.5) * max(contrast, 0) + 1.0;
    outColor = mix(outColor, vec4(1.0), 0.2);

    float power = outColor.r * 0.2126 + outColor.g * 0.7152 + outColor.b * 0.0722 + 0.5;
    outColor = mix(outColor, vec4(waterColor, 1.0), 0.8);
    outColor = mix(outColor, vec4(1.0), 0.3);

    outColor.a = 0.35;
    if (power > 0.2 && power < 0.9)
       outColor.a = 0.1;

    if (outColor.b < 0.85)
        outColor.rgb = vec3(0.2, 0.5, 1.0);

    if (outColor.b > 1.1) {
        outColor.b = 1.0;
        outColor.g = 0.4;
        outColor.a = 0.3;
    }

}
