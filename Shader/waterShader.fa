#version 330 core

out vec4 color;

uniform vec3 myColor;
uniform vec3 lightColor;
uniform vec3 lightPos;

in vec3 Normal;
in vec3 FragPos;
in vec3 basePosition;
in vec3 cameraDirection;

vec3 outColor; //flat for law poly aspect

//Light
vec3 diffuse;
float brightness;
float ambientStrenght = 0.1f;
float shineDamper = 64;
float reflectivity = 1.0;
vec3 finalSpecular;

void extraLighting()
{
    if (basePosition.y > 0.1 && brightness > 0.4) outColor *= 1.01 + (basePosition.y / 20) + (brightness / 200);
    if (basePosition.y < -0.3) outColor *= 0.99 - (basePosition.y / 20) - (brightness / 50);
    if (brightness > 0.5) outColor.y *= (brightness/20) * 40;
}

void baseLighting()
{
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float nDot1 = dot(norm, lightDir);
    brightness = max(nDot1, 0.0);
    diffuse = brightness * lightColor;

    vec3 ambient = ambientStrenght * lightColor;
    outColor = (diffuse + ambient * basePosition.y * 2.3) * myColor;

    //specular
    vec3 cameraNorm = normalize(cameraDirection);
    vec3 lightDirection = -lightDir;
    vec3 lightReflection = reflect(lightDirection, norm);
    float dotReflection = dot(cameraNorm, lightReflection);
    float reflection = max(dotReflection, 0.0);
    float dampedFactor = pow(reflection, shineDamper);
    finalSpecular = dampedFactor * lightColor * reflectivity;
    
    extraLighting();
}

void main()
{
    baseLighting();
    color = vec4(outColor, 1.0) + vec4(finalSpecular, 1.0);
}
