#version 330 core

out vec4 color;

uniform sampler2D grass;
uniform sampler2D path;
uniform sampler2D blendMap;

uniform vec3 lightColor;
uniform vec3 skyColor;

in VS_OUT {
    vec2 TexCoord;
    vec3 cameraDirection;
    vec3 lightVector;
    vec3 normal;
    float visibility;
} fs_in;

in vec3 aDiffuse;

vec3 finalSpecular;
vec3 diffuse;
vec4 textureVector;
const float shineDamper = 64;
const float reflectivity = 0.0;
vec4 terrainColor;

void lighting()
{
    //basic
    vec3 toLight = normalize(fs_in.lightVector);
    vec3 norm = normalize(fs_in.normal);

    //specular
    vec3 cameraNorm = normalize(fs_in.cameraDirection);
    vec3 lightDirection = -toLight;
    vec3 lightReflection = reflect(lightDirection, norm);
    float dotReflection = dot(cameraNorm, lightReflection);
    float reflection = max(dotReflection, 0.0);
    float dampedFactor = pow(reflection, shineDamper);
    finalSpecular = dampedFactor * lightColor * reflectivity;
}

void textureGestion()
{
    vec4 blendMapColor = texture(blendMap, fs_in.TexCoord);

    float grassTextureAmount = 1 - (blendMapColor.r + blendMapColor.g + blendMapColor.b);
    vec2 tiledCoords = fs_in.TexCoord;
    vec4 grassTextureColor = texture(grass, tiledCoords * 20) * grassTextureAmount;
    vec4 pathTextureColor = texture(path, tiledCoords * 30) * blendMapColor.r;

    terrainColor = grassTextureColor + pathTextureColor;
}

void main()
{
    //color = vec4(1.0, 1.0, 1.0, 1.0);
    lighting();
    textureGestion();
    color =  terrainColor * vec4(aDiffuse, 1.0) + vec4(finalSpecular, 1.0);
    color = mix(vec4(skyColor, 1.0), color, fs_in.visibility);
}
