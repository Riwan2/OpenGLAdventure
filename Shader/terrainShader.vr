#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

out vec3 outColor; //flat for low poly aspect

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

uniform vec3 myColor;
uniform vec3 lightColor;
uniform vec3 lightPos;

//Basic
vec3 Normal;
vec3 FragPos;
float ambientStrenght = 0.1f;

//Light
vec3 diffuse;
float brightness;

void baseLighting()
{
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float nDot1 = dot(norm, lightDir);
    brightness = max(nDot1, 0.0);
    diffuse = brightness * lightColor;

    vec3 ambient = ambientStrenght * lightColor;
    outColor = (diffuse + ambient * 2.3) * myColor;
}

void main()
{
    gl_Position = projection * view * model * vec4(aPos, 1.0);
    FragPos = vec3(model * vec4(aPos, 1.0));
    Normal = mat3(transpose(inverse(model))) * aNormal;

    baseLighting();
}
