#version 330 core

out vec4 color;

const int maxLight = 4;

uniform sampler2D myTexture;
uniform vec3 lightColor[maxLight];
uniform vec3 lightAttenuation[maxLight];
uniform vec3 skyColor;
uniform float shineDamper;
uniform float reflectivity;
uniform float ambientStrength = 0.2f;

in VS_OUT {
    vec2 TexCoord;
    vec3 cameraDirection;
    vec3 lightVector[maxLight];
    vec3 normal;
    float visibility;
} fs_in;

vec3 totalSpecular = vec3(0.0);
vec3 totalDiffuse = vec3(0.0);

void lighting()
{
    vec3 cameraNorm = normalize(fs_in.cameraDirection);
    vec3 norm = normalize(fs_in.normal);

    //basic lighting
    for (int i = 0; i < maxLight; i++) {
        float distance = length(fs_in.lightVector[i]);
        float attenuationFactor = lightAttenuation[i].x + (lightAttenuation[i].y * distance) + (lightAttenuation[i].z * distance * distance);
        vec3 toLight = normalize(fs_in.lightVector[i]);
        float dotLight = dot(norm, toLight);
        float brightness = max(dotLight, 0.0);
        
        //specular
        vec3 lightDirection = -toLight;
        vec3 lightReflection = reflect(lightDirection, norm);
        float dotReflection = dot(cameraNorm, lightReflection);
        float reflection = max(dotReflection, 0.0);
        float dampedFactor = pow(reflection, shineDamper);

        //final
        totalDiffuse += (brightness * lightColor[i]) / attenuationFactor;
        totalSpecular += (dampedFactor * lightColor[i] * reflectivity) / attenuationFactor;
    }

    totalDiffuse = max(totalDiffuse, ambientStrength);
    //diffuse = floor(diffuse * numberOfLevel) / numberOfLevel;
}

void main()
{
    //color = vec4(1.0, 1.0, 1.0, 1.0);
    lighting();
    color = texture(myTexture, fs_in.TexCoord) * vec4(totalDiffuse, 1.0) + vec4(totalSpecular, 1.0);
    color = mix(vec4(skyColor, 1.0), color, fs_in.visibility);
}
