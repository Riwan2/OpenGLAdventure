#version 330 core

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTexCoord;

const int maxLight = 4;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
uniform vec3 lightPos[maxLight];

out VS_OUT {
    vec2 TexCoord;
    vec3 cameraDirection;
    vec3 lightVector[maxLight];
    vec3 normal;
    float visibility;
} vs_out;

vec4 worldPosition;
const float density = 0.006;
const float gradient = 2.5;

void main()
{
    worldPosition = model * vec4(aPos, 1.0);
    vec4 positionRelativeToCamera = view * worldPosition;
    
    gl_Position = projection * positionRelativeToCamera;

    float distance = length(positionRelativeToCamera.xyz);
    vs_out.visibility = exp(-pow((distance*density), gradient));
    vs_out.visibility = clamp(vs_out.visibility, 0.0, 1.0);
    
    vs_out.normal = mat3(transpose(inverse(model))) * aNormal;
    vs_out.cameraDirection = vec3(inverse(view) * vec4(0, 0, 0, 1)) - vec3(worldPosition);
    for (int i = 0; i < maxLight; i++) {
        vs_out.lightVector[i] = lightPos[i] - vec3(worldPosition);
    }
    vs_out.TexCoord = aTexCoord;
}
